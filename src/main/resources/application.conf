akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
}


#my-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
#  type = Dispatcher
  # What kind of ExecutionService to use
  #executor = "thread-pool-executor"
#  executor = "fork-join-executor"
  # Configuration for the thread pool
#  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
#    core-pool-size-min = 10
    # No of core threads ... ceil(available processors * factor)
#    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
#    core-pool-size-max = 10
#  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
#  throughput = 100
#}

  #debug {
    # enable DEBUG logging of actor lifecycle changes
    #lifecycle = on
    #event-stream = on
  #}

  #loggers = ["akka.event.Logging$DefaultLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  #loglevel = "DEBUG"
blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 3.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 64
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  #throughput = 100
}
